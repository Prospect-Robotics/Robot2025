//file:noinspection GroovyAssignabilityCheck
//file:noinspection DependencyNotationArgument
plugins {
    id 'java'
    id 'edu.wpi.first.GradleRIO' version '2025.3.1'
    // Plugin needed for Git Build Info
    // (see https://docs.wpilib.org/en/stable/docs/software/advanced-gradlerio/deploy-git-data.html)
    id 'com.peterabeles.gversion' version '1.10'
    id 'idea'
    // Spotless code formatter.
    id 'com.diffplug.spotless' version '6.25.0'
}

// Download the source code for dependencies and the javadoc (in IntelliJ IDEA).
// Not required for running the robot, but helps with IntelliJ IDEA development.
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

spotless {
    // See https://github.com/diffplug/spotless/tree/main/plugin-gradle
    format 'misc', {
        // define the files to apply `misc` to
        target '.gitattributes', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        targetExclude('build/generated/**/*.*')
        importOrder() // Use the default importOrder configuration (can override)
        removeUnusedImports()

        // Use Google Java Format
        // - aosp() causes it to use a four-space indent
        googleJavaFormat('1.24.0').reflowLongStrings()

        formatAnnotations()  // fix formatting of type annotations
    }
    groovyGradle {
        greclipse().configFile('greclipse-gradle.properties')
    }
}

// Generates a BuildConstants file.
// https://docs.wpilib.org/en/stable/docs/software/advanced-gradlerio/deploy-git-data.html
project.compileJava.dependsOn(createVersionFile)
def BUILD_CONSTANTS_AUTOGEN_PATH = 'build/generated/sources/build_constants/'
gversion {
    // Build inside build/ (so that it will be ignored by git due to .gitignore)
    // and inside build/generated/ (so that it will be ignored by our Spotless
    // rules).
    srcDir       = BUILD_CONSTANTS_AUTOGEN_PATH
    classPackage = 'com.team2813'
    className    = 'BuildConstants'
    dateFormat   = 'yyyy-MM-dd HH:mm:ss z'
    timeZone     = 'America/Los_Angeles' // Use preferred time zone
    indent       = '  '
}
sourceSets.main.java.srcDirs += BUILD_CONSTANTS_AUTOGEN_PATH

def ROBOT_MAIN_CLASS = 'com.team2813.Main'

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = true // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    compileOnly 'com.google.auto.value:auto-value-annotations:1.11.0'
    annotationProcessor 'com.google.auto.value:auto-value:1.11.0'

    testImplementation(platform('org.junit:junit-bom:5.13.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'com.google.truth:truth:1.4.4'
    testImplementation 'com.team2813:testing'
    implementation 'com.team2813:lib2813'
    implementation 'com.team2813:limelight'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

downloadDepsPreemptively.dependsOn gradle.includedBuild('lib2813').task(':lib:jar')
downloadDepsPreemptively.dependsOn gradle.includedBuild('lib2813').task(':testing:jar')
downloadDepsPreemptively.dependsOn gradle.includedBuild('lib2813').task(':limelight:jar')

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}
